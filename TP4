/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * TRABAJO PRACTICO 4
  * ALUMNOS: SEGRETIN, EUGENIO ADRIAN - MU:00884
  *          CARRIZO, MILAGROS MARIA BELEN - MU:00901
  * CONSIGNA: DEBOUNCE + UART COMMANDS
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f1xx_hal.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
// Definición de pines para los botones y LEDs
#define TEC1_Pin GPIO_PIN_7
#define TEC1_GPIO_Port GPIOA
#define TEC2_Pin GPIO_PIN_6
#define TEC2_GPIO_Port GPIOA
#define LED1_Pin GPIO_PIN_12
#define LED1_GPIO_Port GPIOB
#define LED2_Pin GPIO_PIN_13
#define LED2_GPIO_Port GPIOB
#define LED3_Pin GPIO_PIN_14
#define LED3_GPIO_Port GPIOB
#define LED4_Pin GPIO_PIN_15
#define LED4_GPIO_Port GPIOB

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;

// Definición de comandos disponibles para cambiar el estado de los LEDs
typedef enum {
    COMMAND_LED1_TOGGLE = 'a', //enciende led 1
    COMMAND_LED2_TOGGLE = 's', //enciende led 2
    COMMAND_LED3_TOGGLE = 'd', //enciende led 3
    COMMAND_LED4_TOGGLE = 'f' //enciende led 4
} commands_t;
typedef enum {
    LIBERADO,  // Estado cuando el botón está liberado
    PRESIONADO,   // Estado cuando el botón está presionado
    DEBOUNCE   // Estado cuando el botón está en proceso de debounce
} ButtonState;

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
void process_uart_command(commands_t command);
void debounce_puls(void); // Función para el manejo del debounce del botón
void read_uart_command(void); //Funcion para los comandos por UART
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */
ButtonState ESTADO = LIBERADO; // Inicialización del estado

// Variables para el debounce de los botones
uint32_t debounce_time_tec1 = 0;
uint32_t debounce_time_tec2 = 0;

int main(void)
{
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
  /* Configure the system clock */
  SystemClock_Config();
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE BEGIN WHILE */
  while (1)
  {
   // Manejo del debounce de los botones
	debounce_puls();
   // Leer y procesar comandos recibidos por UART
    read_uart_command();
  }
  /* USER CODE END 3 */
}

// Función para manejar el debounce de los botones
void debounce_puls(void) {
    // Leer el estado actual de los botones
    GPIO_PinState leer_tec1 = HAL_GPIO_ReadPin(GPIOA, TEC1_Pin);
    GPIO_PinState leer_tec2 = HAL_GPIO_ReadPin(GPIOA, TEC2_Pin);
    // Mensajes como vectores de caracteres
    char msg_presionado1[] = "Tecla apretada: TEC1\r\n";
    char msg_liberado1[] = "Tecla liberada: TEC1\r\n";
    char msg_presionado2[] = "Tecla apretada: TEC2\r\n";
    char msg_liberado2[] = "Tecla liberada: TEC2\r\n";

    switch (ESTADO) {
           case LIBERADO:
               // Si el botón está presionado, cambiar al estado de debounce
               if (leer_tec1 == GPIO_PIN_SET) {
                   ESTADO = DEBOUNCE;
                   debounce_time_tec1 = HAL_GetTick();  // Guardar el tiempo actual
               }
               if (leer_tec2 == GPIO_PIN_SET) {
                   ESTADO = DEBOUNCE;
                   debounce_time_tec2 = HAL_GetTick();  // Guardar el tiempo actual
               }
               break;
           case PRESIONADO:
               // Si el botón está liberado, cambiar al estado de debounce
               if (leer_tec1 == GPIO_PIN_RESET) {
                   ESTADO = DEBOUNCE;
                   debounce_time_tec1 = HAL_GetTick();  // Guardar el tiempo actual
               }
               if (leer_tec2 == GPIO_PIN_RESET) {
                   ESTADO = DEBOUNCE;
                   debounce_time_tec2 = HAL_GetTick();  // Guardar el tiempo actual
                              }
               break;
           case DEBOUNCE:
               // Verificar si ha pasado el tiempo de debounce (50 ms)
               if ((HAL_GetTick() - debounce_time_tec1) > 50) {
                   if (leer_tec1 == GPIO_PIN_SET) {
                       // Si el botón está presionado, cambiar al estado PRESIONADO
                       ESTADO = PRESIONADO;
                       HAL_UART_Transmit(&huart1,msg_presionado1, strlen(msg_presionado1),100);  // Enviar mensaje por UART
                   } else {
                       // Si el botón está liberado, cambiar al estado LIBERADO
                       ESTADO = LIBERADO;
                       HAL_UART_Transmit(&huart1,msg_liberado1, strlen(msg_liberado1),100);  // Enviar mensaje por UART
                   }
               }
               if ((HAL_GetTick() - debounce_time_tec2) > 50) {
                   if (leer_tec2 == GPIO_PIN_SET) {
                   // Si el botón está presionado, cambiar al estado PRESIONADO
                       ESTADO = PRESIONADO;
                       HAL_UART_Transmit(&huart1,msg_presionado2, strlen(msg_presionado2),100);  // Enviar mensaje por UART
                   } else {
                      // Si el botón está liberado, cambiar al estado LIBERADO
                       ESTADO = LIBERADO;
                       HAL_UART_Transmit(&huart1,msg_liberado2, strlen(msg_liberado2),100);  // Enviar mensaje por UART
                                  }
                              }
               break;
       }
}
// Función para leer y procesar comandos recibidos por UART
void read_uart_command(void) {
    // Buffer para almacenar el byte recibido
    uint8_t rx_byte;

    // Verificar si se ha recibido un byte de UART
    if (HAL_UART_Receive(&huart1, &rx_byte, 1, 0) == HAL_OK) {
        // Convertir el byte recibido en un comando
        commands_t command = (commands_t)rx_byte;

        // Procesar el comando
        process_uart_command(command);
    }
}
// Función para procesar los comandos recibidos por UART
void process_uart_command(commands_t command) {
    switch (command) {
        case COMMAND_LED1_TOGGLE: //COMMAND_LED1_TOGGLE = 'a'
            // Cambiar el estado del LED1
            HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
            break;
        case COMMAND_LED2_TOGGLE:  //COMMAND_LED2_TOGGLE = 'b'
            // Cambiar el estado del LED2
            HAL_GPIO_TogglePin(GPIOA, LED2_Pin);
            break;
        case COMMAND_LED3_TOGGLE:  //COMMAND_LED3_TOGGLE = 'c'
            // Cambiar el estado del LED3
            HAL_GPIO_TogglePin(GPIOA, LED3_Pin);
            break;
        case COMMAND_LED4_TOGGLE:  //COMMAND_LED4_TOGGLE = 'd'
            // Cambiar el estado del LED4
            HAL_GPIO_TogglePin(GPIOA, LED4_Pin);
            break;
        default:
        	HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
        	HAL_GPIO_TogglePin(GPIOA, LED2_Pin);
        	HAL_Delay(2000);
        	HAL_GPIO_TogglePin(GPIOA, LED3_Pin);
        	HAL_GPIO_TogglePin(GPIOA, LED4_Pin);
        	HAL_Delay(2000);
    }
}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PULS2_Pin PULS1_Pin */
  GPIO_InitStruct.Pin = TEC2_Pin|TEC1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}


/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
